<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Paul Ashraf</title>
        <link>https://www.paulashraf.com</link>
        <description>Paul Ashraf Software Finds and Movie Reviews</description>
        <lastBuildDate>Sat, 19 Nov 2022 14:24:19 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Paul Ashraf</title>
            <url>https://www.paulashraf.com/favicon.ico</url>
            <link>https://www.paulashraf.com</link>
        </image>
        <copyright>All rights reserved 2022</copyright>
        <item>
            <title><![CDATA[Better Memory Performance in Ruby/Rails with Jemalloc]]></title>
            <link>https://www.paulashraf.com/blog/jemalloc-ruby</link>
            <guid>https://www.paulashraf.com/blog/jemalloc-ruby</guid>
            <pubDate>Mon, 31 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Instantly improve your ruby/rails' memory footprint with this 2 line change by using jemalloc instead of malloc]]></description>
            <content:encoded><![CDATA[<p>jemalloc is a general purpose malloc(3) implementation that emphasizes fragmentation avoidance and scalable concurrency support. It really shines when used with ruby, and adding it is pretty painless.</p>
<p>All you have to do is add the following 2 lines to your <code>Dockerfile</code>.</p>
<pre class="language-dockerfile"><code class="language-dockerfile"><span class="token instruction"><span class="token keyword">RUN</span> apt-get update ; <span class="token operator">\</span>
    apt-get install -y --no-install-recommends libjemalloc2 ;</span>

<span class="token instruction"><span class="token keyword">ENV</span> LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so.2</span>
</code></pre>
<p>We are going to use the <code>LD_PRELOAD</code> environment variable approach above. If you set <code>LD_PRELOAD</code> to the path of a shared object, that file will be loaded before any other library (including the C runtime, <code>libc.so</code>). So to run our jemalloc implementation, we just define the path of the jemalloc lib.</p>
<p>For M1 Macs you will need to change the path as follows:</p>
<pre class="language-dockerfile"><code class="language-dockerfile"><span class="token comment"># use this for m1 macs</span>
<span class="token instruction"><span class="token keyword">ENV</span> LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libjemalloc.so.2</span>
</code></pre>]]></content:encoded>
            <author>me@paulashraf.com (Paul Ashraf)</author>
        </item>
        <item>
            <title><![CDATA[Implementing a Global Error Handler with React Query]]></title>
            <link>https://www.paulashraf.com/blog/global-error-handler-react-query</link>
            <guid>https://www.paulashraf.com/blog/global-error-handler-react-query</guid>
            <pubDate>Fri, 14 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[A nice trick that enables you to implement a global error handler for all mutations while also preserving the ability to handle individual errors separately.]]></description>
            <content:encoded><![CDATA[<p>There is a nice trick within the amazing React Query library that is not well-known which enables us to catch all errors that will be thrown by mutations or queries inside the whole project. The trick is to define our own <code>MutationCache</code> or <code>QueryCache</code> and pass it to our <code>QueryClient</code> instance.</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyApp</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AppProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>queryClient<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">QueryClient</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">QueryClientProvider</span></span> <span class="token attr-name">client</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>queryClient<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Hydrate</span></span> <span class="token attr-name">state</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>pageProps<span class="token punctuation">.</span><span class="token property-access">dehydratedState</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Hydrate</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReactQueryDevtools</span></span> <span class="token attr-name">initialIsOpen</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">QueryClientProvider</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This is a typical React Query setup. Here React Query will implicitly create for us our <code>MutationCache</code> and <code>QueryCache</code> that will be used by the <code>QueryClient</code> instance. However we can define our own instances of the caches and pass it to the constructor of <code>QueryClient</code>.</p>
<p>For the rest of the guide I will only implement the <code>MutationCache</code> but the exact same steps could be taken for the <code>QueryCache</code>.</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyApp</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AppProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> mutationCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">MutationCache</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>queryClient<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">QueryClient</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> mutationCache <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">QueryClientProvider</span></span> <span class="token attr-name">client</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>queryClient<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Hydrate</span></span> <span class="token attr-name">state</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>pageProps<span class="token punctuation">.</span><span class="token property-access">dehydratedState</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Hydrate</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReactQueryDevtools</span></span> <span class="token attr-name">initialIsOpen</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">QueryClientProvider</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The <code>MutationCache</code> constructor takes a lot of options, the most relevant one for now is to define a typical <code>onError</code> function, like the normal ones you&#x27;d implement with <code>useMutation</code> or <code>useQuery</code>.</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyApp</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AppProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> mutationCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">MutationCache</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// any error handling code...</span>
      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>queryClient<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">QueryClient</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> mutationCache <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">QueryClientProvider</span></span> <span class="token attr-name">client</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>queryClient<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Hydrate</span></span> <span class="token attr-name">state</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>pageProps<span class="token punctuation">.</span><span class="token property-access">dehydratedState</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Hydrate</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReactQueryDevtools</span></span> <span class="token attr-name">initialIsOpen</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">QueryClientProvider</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>With those simple few lines we already implemented our global error handler. Now any mutation fired with <code>useMutation</code> thought the whole project will pass by this <code>onError</code> if it results in an error. You even have access to the <code>error</code> object so you can add conditional logic, like: &quot;only displaying a toast if the status is <code>&gt;=500</code>&quot;.</p>
<p>One small issue remains... What if you want to handle an error using a different way in a specific <code>useMutation</code> instance, i.e. you want to define a specific <code>onError</code> for that mutation but obviously you want all other mutations to pass by the global <code>onError</code> we defined above. With the current implementation, it will pass by both, which is obviously an undesirable behavior.
Making matters worse, it wall pass by the global one first, which prevents us from passing any data through the <code>error</code> object that we can then use inside the <code>onError</code> of the <code>MutationCache</code>.</p>
<p>Don&#x27;t worry! There is an elegant solution for this problem. The <code>onError</code> of the <code>MutationCache</code> also receives a <code>mutation</code> object which contains the relevant options used in the <code>useMutation</code> call. This is perfect because this is exposes wether the <code>useMutation</code> that fired this api call had an <code>onError</code> defined or not. We can then conditionally handle the error or ignore it.</p>
<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyApp</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AppProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> mutationCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">MutationCache</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> _variables<span class="token punctuation">,</span> _context<span class="token punctuation">,</span> mutation<span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// If this mutation has an onError defined, skip this</span>
      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">.</span><span class="token property-access">onError</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>

      <span class="token comment">// any error handling code...</span>
      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>queryClient<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">QueryClient</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> mutationCache <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">QueryClientProvider</span></span> <span class="token attr-name">client</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>queryClient<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Hydrate</span></span> <span class="token attr-name">state</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>pageProps<span class="token punctuation">.</span><span class="token property-access">dehydratedState</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Hydrate</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReactQueryDevtools</span></span> <span class="token attr-name">initialIsOpen</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">QueryClientProvider</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>]]></content:encoded>
            <author>me@paulashraf.com (Paul Ashraf)</author>
        </item>
        <item>
            <title><![CDATA[My Neighbor Totoro (1988) dir. Hayao Miyazaki]]></title>
            <link>https://www.paulashraf.com/blog/my-neighbour-totoro</link>
            <guid>https://www.paulashraf.com/blog/my-neighbour-totoro</guid>
            <pubDate>Thu, 29 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[When two girls move to the country to be near their ailing mother, they have adventures with the wondrous forest spirits who live nearby.]]></description>
            <content:encoded><![CDATA[<p>The second Miyazaki film I&#x27;ve seen (after the infamous Spirited Away) and it had me gripped all the way, exactly like Spirited Away. This for sure will be the start of my Studio Ghibli journey.</p>
<p>The movie opens with a finendy child-like Song about Totoro, and as the first act plays out, you are delighted with of the most simple, gorgeous, gripping children movie you&#x27;ll ever see. And here, I&#x27;m not saying a children movie as a negative!</p>
<img src="/_next/static/media/1.5fdc752a.jpeg" width="1200" height="675" decoding="async" data-nimg="future" loading="lazy" style="color:transparent"/>
<p>The story is about two girls, Stuski and Mei, moving to rural Japan with their father, while their mother is in the hospilal. As they battle the fact that their mother is sick, and the fear of living in a new place, they stert letling thier imagination roam free.</p>
<p>By doing this, we are delighted with a gorgeous, expertly cralled, deeply personl peice of cinema.
While the movie is relatively &quot;action-free&quot;, and the plot could be summariesed in a couple of lines, the movie it&#x27;s beautiful frames will grip you from start to the finish with it&#x27;s beautiful frames, wonderful music and personal story.</p>
<img src="/_next/static/media/2.231efc8a.jpeg" width="1600" height="900" decoding="async" data-nimg="future" loading="lazy" style="color:transparent"/>
<p>I was not suprised that this movie was largly, auto-biographical, and you will definitly feel it. Miyazaki has to change the charchter to two girls, in order not to make it too personal. I still prefer Spirited Away over this, but part at me just enjoy these very simple films.</p>
<p>This will definetly be rewatched many many times again.
8/10.</p>]]></content:encoded>
            <author>me@paulashraf.com (Paul Ashraf)</author>
        </item>
    </channel>
</rss>