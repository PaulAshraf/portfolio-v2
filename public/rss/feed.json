{
    "version": "https://jsonfeed.org/version/1",
    "title": "Paul Ashraf",
    "home_page_url": "https://www.paulashraf.com",
    "feed_url": "https://www.paulashraf.com/rss/feed.json",
    "description": "Paul Ashraf Software Finds and Movie Reviews",
    "icon": "https://www.paulashraf.com/favicon.ico",
    "author": {
        "name": "Paul Ashraf"
    },
    "items": [
        {
            "id": "https://www.paulashraf.com/blog/a-day-in-the-life-of-a-kubernetes-developer",
            "content_html": "<p>This read will just be a walk through of an annoying bug I faced in our cloud-native setup. It forced me to consider whether all of this complexity is worth it.</p>\n<p>Here at <a href=\"https://zammit.shop\">Zammit</a> we use <a href=\"https://helm.sh/\">Helm Charts</a> to build and release our services. Each service has a <code>/deploy</code> directory with it&#x27;s helm chart&#x27;s definition.</p>\n<p>This includes all the <a href=\"https://kubernetes.io/\">Kubernetes</a> manifests it needs to define, like an <code>ingress</code>, <code>deployment</code>, <code>hpa</code> and so on. It can also list other helm charts as its dependencies. For example, our main service had <a href=\"https://bitnami.com/\">Bitnami</a>&#x27;s <code>redis</code> helm chart with a specific version (foreshadowing ðŸ˜¢). Our release pipeline is then as follows:</p>\n<ul>\n<li><strong>CI: Github Actions</strong>\n<ul>\n<li>We build our docker image using Github Actions</li>\n<li>We upload them to image to our <strong>GCP</strong> bucket</li>\n<li>We create a git tag in our repo</li>\n</ul>\n</li>\n<li><strong>CD: ArgoCD</strong>\n<ul>\n<li>ArgoCD then listens for git tags on our git repo</li>\n<li>If it finds out it then instates a sync</li>\n<li>It gets the code attached to the latest git tag, and builds the helm chart (with it&#x27;s dependencies)</li>\n<li>It caches the output in the internal redis pod it has, to save on time</li>\n<li>It takes the output K8S manifested and syncs them using <code>kubectl</code></li>\n</ul>\n</li>\n</ul>\n<p>The system was working great, until it didn&#x27;t. We faced a weird cryptic error:</p>\n<img src=\"/_next/static/media/1.738d82b2.png\" width=\"2170\" height=\"448\" decoding=\"async\" data-nimg=\"future\" loading=\"lazy\" style=\"color:transparent\"/>\n<p>After some googling around, turns out this is a common Argo error, and it happens when the <code>helm template</code> command fails. (Remember that argo only uses helm for its templating functionality, it manges the K8S syncing itself). Argo then caches this result in redis, so even a rebuild will not fix this because the helm chart did not change. According to a lot of threads on their Github Issues, this could happen randomly due to weird race conditions, or a myriad other reasons. So then I tried my first approach:</p>\n<h3>Approach #1: Flush the redis cache using <code>FLUSHALL</code> and restart the <code>repo-server</code> pod.</h3>\n<p>Unfortunately that did not work. However, it leaded me looking into the <code>repo-server</code> logs, which turned out to be really useful. I then was able to see the actual <code>helm template</code> build error, not the cryptic on Argo was giving me in the UI. It said it could not find the <code>redis</code> chart in the <code>/charts</code> subdirectory.</p>\n<p>That is weird, why is that happening? After some googling, I could not find anyone having similar issue. However, I realized our Argo helm chart version was quite old and a lot of bugs was solved since then. So my next approach was to upgrade Argo, maybe it magically solves the issue!</p>\n<h3>Approach #2: Upgrade the Argo helm chart to the latest version.</h3>\n<p>After some annoyances with the <code>helm upgrade</code> command; is it <code>helm upgrade argo-cd argo/argo-cd</code> or <code>helm upgrade argo/argo-cd argo-cd</code>? So annoying. As expected, this did not solve the issue. During my last google search, a lot of people faces that error (the &quot;could not find the <code>redis</code> chart in the <code>/charts</code> subdirectory&quot;) when trying <code>helm dep update</code> command. While this was unrelated to Argo, it dawned on me that the <code>repo-server</code> pod is the once pulling our repo from git, and I can run <code>helm</code> commands there.</p>\n<p>So I decided to do the <code>helm dep update</code> myself. Finally, I get a proper error message! It said it could not download the <code>bitnami/redis</code> chart. After looking on <a href=\"https://artifacthub.io/packages/helm/bitnami/redis\">Artifact Hub</a>, turns out our redis version was not listed anymore to be downloadable. So the obvious next step is to try and upgrade redis.</p>\n<h3>Approach #2: Upgrade the helm chart dependencies.</h3>\n<p>Just bump the version in <code>Chart.yaml</code> but don&#x27;t forget to run <code>helm dep update</code> so it can update the <code>Chart.lock</code> file. And that was it, Flush the redis cache and the build passes!</p>\n<img src=\"/_next/static/media/2.51830bd6.png\" width=\"1782\" height=\"438\" decoding=\"async\" data-nimg=\"future\" loading=\"lazy\" style=\"color:transparent\"/>\n<p>This article is not a criticism of any of the tools mentioned above. These are all amazing tools and it is a ton of fun working with them. However, this annoying bug forced me to reconsider that this complicated CI/CD setup is quite over-engineered for our small startup.</p>\n<p>A 50-developer company with a platform engineering team, Awesome âœ…. A 4-developer small startup, maybe be it needs to be reconsidered ðŸ¤”</p>\n<p>One last closing thought, is we engineers often don&#x27;t consider how valuable our time is. In our pursuit of open-source, cloud-native tools that are fun to engineer and provide no vendor lock-ins, we often forget that they come with a hidden cost; the huge engineering time and effort it takes to maintain these tools and systems. For some teams, that cost makes sense and will pay off, for others it will not.</p>",
            "url": "https://www.paulashraf.com/blog/a-day-in-the-life-of-a-kubernetes-developer",
            "title": "A day in the life of a Kubernetes developer/administrator",
            "summary": "Just a walk through of an annoying bug I faced in our cloud-native setup, that forced me to consider whether all of this complexity is worth it.",
            "date_modified": "2022-12-24T00:00:00.000Z",
            "author": {
                "name": "Paul Ashraf"
            }
        },
        {
            "id": "https://www.paulashraf.com/blog/luca",
            "content_html": "<p>A little Pixar flick that was easily forgotten during the post-pandemic movies rush. The movie revolves around Luca, a &quot;sea-monster&quot; that has the ability to turn human if he goes out of water. Some events transpires early on in the movie that thrusts him into a cute little adventure in a small italian town.</p>\n<p>As with all Pixar movies lately, I do not need to mention the breathtaking animation! It excellently merges life-like scenery with unrealistic cartoon human characters, that produces a film that is just a joy to look at. Pixar, in my opinion, outdid themselves with their depiction of a small italian village during the summer.</p>\n<p>Coupling the excellent animation, with great voice acting, a beautiful original soundtrack and a mix of great italian classics, you get a movie deserving the often-cliche description &quot;Every frame a painting&quot;.</p>\n<img src=\"/_next/static/media/1.8e7a1639.jpg\" width=\"3840\" height=\"2160\" decoding=\"async\" data-nimg=\"future\" loading=\"lazy\" style=\"color:transparent\"/>\n<p>However, my positive experience ends here as I have multiple issues with the writing and direction here. While the direction and writing has this care-free low-stakes vision that mirrors the events of the film&#x27;s adventure, it produces a plot that is weirdly paced, and has very low stakes.</p>\n<p>Without getting into details, the movie does not provide us with many reasons to care for our protagonist&#x27;s adventure. And that adventure itself does not have any deeper meaning or parallels that any adult would appreciate. If you have expectations similar to other Pixar movies, you will greatly be disappointed.</p>\n<p>The characters also lake any depth, like Lucas&#x27; friend, but where it really shows is the incredibly 1-dimensional villain in this movie. What a wasted opportunity!</p>\n<img src=\"/_next/static/media/2.ec767b3c.jpg\" width=\"1920\" height=\"1034\" decoding=\"async\" data-nimg=\"future\" loading=\"lazy\" style=\"color:transparent\"/>\n<p>The movie makes up for its lame opening and second act with an exciting third act and an emotional finale. However, I expect more from a Pixar movie and this movie left me a little bit disappointed.</p>\n<p>Although I will keep listening to the amazing soundtrack, this will be one of the few Pixar films that I will not re-watch again anytime soon.\n6.5/10.</p>",
            "url": "https://www.paulashraf.com/blog/luca",
            "title": "Luca (2021) dir. Enrico Casarosa",
            "summary": "On the Italian Riviera, an unlikely but strong friendship grows between a human being and a sea monster disguised as a human.",
            "date_modified": "2022-12-23T00:00:00.000Z",
            "author": {
                "name": "Paul Ashraf"
            }
        },
        {
            "id": "https://www.paulashraf.com/blog/jemalloc-ruby",
            "content_html": "<p>jemalloc is a general purpose malloc(3) implementation that emphasizes fragmentation avoidance and scalable concurrency support. It really shines when used with ruby, and adding it is pretty painless.</p>\n<p>All you have to do is add the following 2 lines to your <code>Dockerfile</code>.</p>\n<pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get update ; <span class=\"token operator\">\\</span>\n    apt-get install -y --no-install-recommends libjemalloc2 ;</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so.2</span>\n</code></pre>\n<p>We are going to use the <code>LD_PRELOAD</code> environment variable approach above. If you set <code>LD_PRELOAD</code> to the path of a shared object, that file will be loaded before any other library (including the C runtime, <code>libc.so</code>). So to run our jemalloc implementation, we just define the path of the jemalloc lib.</p>\n<p>For M1 Macs you will need to change the path as follows:</p>\n<pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># use this for m1 macs</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libjemalloc.so.2</span>\n</code></pre>",
            "url": "https://www.paulashraf.com/blog/jemalloc-ruby",
            "title": "Better Memory Performance in Ruby/Rails with Jemalloc",
            "summary": "Instantly improve your ruby/rails' memory footprint with this 2 line change by using jemalloc instead of malloc",
            "date_modified": "2022-10-31T00:00:00.000Z",
            "author": {
                "name": "Paul Ashraf"
            }
        },
        {
            "id": "https://www.paulashraf.com/blog/global-error-handler-react-query",
            "content_html": "<p>There is a nice trick within the amazing React Query library that is not well-known which enables us to catch all errors that will be thrown by mutations or queries inside the whole project. The trick is to define our own <code>MutationCache</code> or <code>QueryCache</code> and pass it to our <code>QueryClient</code> instance.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyApp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">AppProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>queryClient<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">QueryClient</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QueryClientProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>queryClient<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hydrate</span></span> <span class=\"token attr-name\">state</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pageProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">dehydratedState</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>pageProps<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Hydrate</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ReactQueryDevtools</span></span> <span class=\"token attr-name\">initialIsOpen</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">QueryClientProvider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This is a typical React Query setup. Here React Query will implicitly create for us our <code>MutationCache</code> and <code>QueryCache</code> that will be used by the <code>QueryClient</code> instance. However we can define our own instances of the caches and pass it to the constructor of <code>QueryClient</code>.</p>\n<p>For the rest of the guide I will only implement the <code>MutationCache</code> but the exact same steps could be taken for the <code>QueryCache</code>.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyApp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">AppProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> mutationCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">MutationCache</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>queryClient<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">QueryClient</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mutationCache <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QueryClientProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>queryClient<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hydrate</span></span> <span class=\"token attr-name\">state</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pageProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">dehydratedState</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>pageProps<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Hydrate</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ReactQueryDevtools</span></span> <span class=\"token attr-name\">initialIsOpen</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">QueryClientProvider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The <code>MutationCache</code> constructor takes a lot of options, the most relevant one for now is to define a typical <code>onError</code> function, like the normal ones you&#x27;d implement with <code>useMutation</code> or <code>useQuery</code>.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyApp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">AppProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> mutationCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">MutationCache</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// any error handling code...</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>queryClient<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">QueryClient</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mutationCache <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QueryClientProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>queryClient<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hydrate</span></span> <span class=\"token attr-name\">state</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pageProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">dehydratedState</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>pageProps<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Hydrate</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ReactQueryDevtools</span></span> <span class=\"token attr-name\">initialIsOpen</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">QueryClientProvider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>With those simple few lines we already implemented our global error handler. Now any mutation fired with <code>useMutation</code> thought the whole project will pass by this <code>onError</code> if it results in an error. You even have access to the <code>error</code> object so you can add conditional logic, like: &quot;only displaying a toast if the status is <code>&gt;=500</code>&quot;.</p>\n<p>One small issue remains... What if you want to handle an error using a different way in a specific <code>useMutation</code> instance, i.e. you want to define a specific <code>onError</code> for that mutation but obviously you want all other mutations to pass by the global <code>onError</code> we defined above. With the current implementation, it will pass by both, which is obviously an undesirable behavior.\nMaking matters worse, it wall pass by the global one first, which prevents us from passing any data through the <code>error</code> object that we can then use inside the <code>onError</code> of the <code>MutationCache</code>.</p>\n<p>Don&#x27;t worry! There is an elegant solution for this problem. The <code>onError</code> of the <code>MutationCache</code> also receives a <code>mutation</code> object which contains the relevant options used in the <code>useMutation</code> call. This is perfect because this is exposes wether the <code>useMutation</code> that fired this api call had an <code>onError</code> defined or not. We can then conditionally handle the error or ignore it.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyApp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">AppProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> mutationCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">MutationCache</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> _variables<span class=\"token punctuation\">,</span> _context<span class=\"token punctuation\">,</span> mutation<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// If this mutation has an onError defined, skip this</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span><span class=\"token property-access\">options</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onError</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// any error handling code...</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>queryClient<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">QueryClient</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mutationCache <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QueryClientProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>queryClient<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hydrate</span></span> <span class=\"token attr-name\">state</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pageProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">dehydratedState</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>pageProps<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Hydrate</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ReactQueryDevtools</span></span> <span class=\"token attr-name\">initialIsOpen</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">QueryClientProvider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
            "url": "https://www.paulashraf.com/blog/global-error-handler-react-query",
            "title": "Implementing a Global Error Handler with React Query",
            "summary": "A nice trick that enables you to implement a global error handler for all mutations while also preserving the ability to handle individual errors separately.",
            "date_modified": "2022-10-14T00:00:00.000Z",
            "author": {
                "name": "Paul Ashraf"
            }
        },
        {
            "id": "https://www.paulashraf.com/blog/my-neighbour-totoro",
            "content_html": "<p>The second Miyazaki film I&#x27;ve seen (after the infamous Spirited Away) and it had me gripped all the way, exactly like Spirited Away. This for sure will be the start of my Studio Ghibli journey.</p>\n<p>The movie opens with a friendly child-like Song about Totoro, and as the first act plays out, you are delighted with of the most simple, gorgeous, gripping children movie you&#x27;ll ever see. And here, I&#x27;m not saying a children movie as a negative!</p>\n<img src=\"/_next/static/media/1.5fdc752a.jpeg\" width=\"1200\" height=\"675\" decoding=\"async\" data-nimg=\"future\" loading=\"lazy\" style=\"color:transparent\"/>\n<p>The story is about two girls, Stuski and Mei, moving to rural Japan with their father, while their mother is in the hospital. As they battle the fact that their mother is sick, and the fear of living in a new place, they start letting their imagination roam free.</p>\n<p>By doing this, we are delighted with a gorgeous, expertly crafted, deeply personal piece of cinema.\nWhile the movie is relatively &quot;action-free&quot;, and the plot could be summarized in a couple of lines, the movie it&#x27;s beautiful frames will grip you from start to the finish with it&#x27;s beautiful frames, wonderful music and personal story.</p>\n<img src=\"/_next/static/media/2.231efc8a.jpeg\" width=\"1600\" height=\"900\" decoding=\"async\" data-nimg=\"future\" loading=\"lazy\" style=\"color:transparent\"/>\n<p>I was not surprised that this movie was largely, auto-biographical, and you will definitely feel it. Miyazaki has to change the character to two girls, in order not to make it too personal. I still prefer Spirited Away over this, but part at me just enjoy these very simple films.</p>\n<p>This will definitely be rematched many many times again.\n8/10.</p>",
            "url": "https://www.paulashraf.com/blog/my-neighbour-totoro",
            "title": "My Neighbor Totoro (1988) dir. Hayao Miyazaki",
            "summary": "When two girls move to the country to be near their ailing mother, they have adventures with the wondrous forest spirits who live nearby.",
            "date_modified": "2022-09-29T00:00:00.000Z",
            "author": {
                "name": "Paul Ashraf"
            }
        }
    ]
}